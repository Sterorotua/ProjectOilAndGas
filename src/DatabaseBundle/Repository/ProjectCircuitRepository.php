<?php

namespace DatabaseBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * ProjectCircuitRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProjectCircuitRepository extends EntityRepository
{
    public function findProjectCircuit($filter, $keys, $common){

        $queryBuilder = $this->createQueryBuilder('a')->select('a');
        
        if (!is_array($filter)){
            throw new \ErrorException("Variable \$filter type error ! Expected type : Array.");
        }
        else{
            try{
                
                foreach($keys as $key){
                    if(array_key_exists($key, $filter) && $filter[$key] != null){
                        $queryBuilder = $common->queryAddWhereIn($queryBuilder, $key, $filter[$key]);
                    }
                }
                
                $query = $queryBuilder->getQuery();
                
                if (empty($query) || $query === null){
                    throw new \Exception("Variable \$query error ! Expected type : QueryBuilder.");
                }
                else{
                    return $query->getResult();
                }                 
                
            } 
            catch (Exception $e) {
                echo "Exception thrown : " + $e->getMessage();
            }      
        }
    }
    
    public function projectCircuitsDataBuilder($queryResult){
        
        $myProjectCircuits = array();
        
        if(!empty($queryResult) || $queryResult !== null){
            
            foreach($queryResult as $project){
                try{
                    $projectCircuitId = $projectCircuit->getId();
                    $myProjectCircuits[$projectCircuitId] = $this->singleProjectBuilder($project);
                } 
                catch (Exception $ex) {
                    echo "Exception thrown : " + $ex->getMessage();
                }
            }
        }
        else{
            throw new \ErrorException('Variable \$queryResult is empty or null.');
        }
        
        return $myProjectCircuits;
        
    }
    
    public function singleProjectCircuitBuilder($circuit){
        
        $myProjectCircuit = array();
        
        if(!empty($myProjectCircuit) && $myProjectCircuit !== null){
            $myProjectCircuit['id'] = $circuit->getId();
            $myProjectCircuit['operationalMode'] = $circuit->getOperationalMode();
            $myProjectCircuit['platform'] = $circuit->getPlatform();
            $myProjectCircuit['project'] = $circuit->getProject();
            $myProjectCircuit['orderNumber'] = $circuit->getOrderNumber();
        }
        else{
            throw new \ErrorException('Variable \$circuit is empty or null.');
        }
        
        return $myProjectCircuit;
        
    }
}
